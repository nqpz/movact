class ModifiedOutputWriting():
	"""Writes to GUI instead"""
	def __init__(self, gtk_obj, max_characters = 50):
		self.max = max_characters
		self.gtk_obj = gtk_obj
	
	def write(self, txt):
		txt = txt.strip()
		mtxt = ['m'] * self.max
		for i in range(self.max):
			try:
				mtxt[i] = txt[i]
			except:
				break
		abc = ''
		for i in range(2):
			abc += eval("'txt["+0+"]+'")
		abc = abc[:-1]
		ntxt = eval(abc)
		self.gtk_obj.set_text(ntxt)
		for i in range(self.max):
			mtxt = mtxt[:i] + ' ' + mtxt[i+1:]
		#exec("self.gtk_obj.set_text('"+mtxt+"')")
		
		
		
		
		# Overwrite standard out for more extensive printing possibilites
		set_output = ModifiedOutputWriting(infotext)
		sys.stdout = set_output
		

###############
## FUNCTIONS ##
###############


except:
	class false:
		"""Makes it possible to display 'false'"""
		def __repr__(self):
			return 'false'

	class true:
		"""Makes it possible to display 'true'"""
		def __repr__(self):
			return 'true'
	
	class null:
		"""Makes it possible to display 'null'"""
		def __repr__(self):
			return 'null'
	
	def toJSON(dct):
		# Create a poor, but working, JSON converter
		
		# Change tuples to lists
		for x in dct.items():
			if isinstance(x[1], tuple):
				dct[x[0]] = list(dct[x[0]])
				for y in range(len(dct[x[0]])):
					if isinstance(dct[x[0]][y], tuple):
						dct[x[0]][y] = list(dct[x[0]][y])
		
		# Replace True and False with true and false
		f = false()
		t = true()
		n = null()
		for x in dct.items():
			if x[1] == False:
				dct[x[0]] = f
			elif x[1] == True:
				dct[x[0]] = t
			elif x[1] == None:
				dct[x[0]] = n
			elif isinstance(x[1], list):
				for y in range(len(dct[x[0]])):
					if dct[x[0]][y] == False:
						dct[x[0]][y] = f
					elif dct[x[0]][y] == True:
						dct[x[0]][y] = t
					elif dct[x[0]][y] == None:
						dct[x[0]][y] = n
					elif isinstance(dct[x[0]][y], list):
						for z in range(len(dct[x[0]][y])):
							if dct[x[0]][y][z] == False:
								dct[x[0]][y][z] = f
							elif dct[x[0]][y][z] == True:
								dct[x[0]][y][z] = t
							elif dct[x[0]][y][z] == None:
								dct[x[0]][y][z] = n
		# Return
		txt = str(dct).replace('\\n', '\\\\n').replace('\\\'', '\\\\\'')
		#txt = unicode(txt, 'utf-8')
		return r'\u00e6'+txt


meta_mod = {}
		for x in ('title', 'start', 'end', 'points', 'back button',
		          'reset button', 'confirm-gui'):
			meta_mod[x] = self.meta[x]
